```{python}
import numpy as np
import plotly.graph_objects as go
import plotly.io as pio
pio.templates.default = "seaborn"
import h5py

def read_frame(filename, var):
    mesh = h5py.File(filename, 'r')['mesh']
    points = mesh['points']
    connectivity = mesh['connectivity']

    segments = np.zeros((connectivity.shape[0], 2, 2))
    segments[:, :, 0] = points[:][connectivity[:]][:, :, 0]

    centers = .5*(segments[:, 0, 0] + segments[:, 1, 0])

    u = mesh['fields'][var][:]
    level = mesh['fields']['level'][:]

    index = np.argsort(centers)

    x = centers[index]
    u = u[index]
    level = level[index]

    return x, u, level

def recons(xmin, xmax, min_level, max_level, x, u, level):

    # read leaf cells
    ul = {}
    for ilevel in range(min_level, max_level+1):
        dx = (xmax-xmin)/(2**ilevel)
        ul[ilevel] = np.empty(2**ilevel)
        ul[ilevel][:] = np.nan
        idx, = np.where(level == ilevel)
        ##print(ilevel, idx, dx, (x[idx]-xmin-0.5*dx)/dx)
        index = ((x[idx]-xmin-0.5*dx)/dx).astype(int)
        ##print(index)
        ul[ilevel][index] = u[idx]

    # projection of leaves
    for ilevel in range(max_level-1, min_level-1, -1):
        #print('ilevel =', ilevel)
        for idx in range(2**(ilevel)):
            #print(ul[ilevel+1][2*idx])
            if not np.isnan(ul[ilevel+1][2*idx]):
                #print(idx, ul[ilevel][idx], ul[ilevel+1][2*idx], ul[ilevel+1][2*idx+1])
                ul[ilevel][idx] = 0.5 * (ul[ilevel+1][2*idx] + ul[ilevel+1][2*idx+1])

    # prediction
    for ilevel in range(min_level, max_level):
        #print('ilevel =', ilevel)
        for idx in range(2**ilevel):
            if np.isnan(ul[ilevel+1][2*idx]):
                #print(idx)
                ul[ilevel+1][2*idx]   = ul[ilevel][idx] - (1./8) * (ul[ilevel][(idx+1)%(2**ilevel)] - ul[ilevel][idx-1])
                ul[ilevel+1][2*idx+1] = ul[ilevel][idx] + (1./8) * (ul[ilevel][(idx+1)%(2**ilevel)] - ul[ilevel][idx-1])
                #ul[ilevel+1][2*idx]   = ul[ilevel][idx] - (22./128.) * (ul[ilevel][(idx+1)%(2**ilevel)] - ul[ilevel][idx-1]) + (3./128.) * (ul[ilevel][(idx+2)%(2**ilevel)] - ul[ilevel][idx-2])
                #ul[ilevel+1][2*idx+1] = ul[ilevel][idx] + (22./128.) * (ul[ilevel][(idx+1)%(2**ilevel)] - ul[ilevel][idx-1]) - (3./128.) * (ul[ilevel][(idx+2)%(2**ilevel)] - ul[ilevel][idx-2])

    return ul[max_level][:]

def compute_err(eps):

    min_level = 3

    order = 1
    n_ghost = order//2+ order%2

    xmin = -1.
    xmax = 1.

    ldx       = []
    lerr      = []
    lerrmr    = []
    lerrmrmlf = []
    ldiff = []
    lerrmrr = []
    lerrmr_rate = []
    lerrmrmlf_rate = []

    # quasi-exact sol
    ilevel = 13
    nx = 2**ilevel
    uqexa = np.empty(nx+2*n_ghost)
    filename = './data/order01/burgers_uniform/burgers_level_'+str(ilevel)+'_'+str(ilevel)+'.h5'
    xqexa, uqexa[n_ghost:-n_ghost], _ = read_frame(filename, 'u')
    # periodic boundary cond.
    uqexa[:n_ghost] = uqexa[nx:-n_ghost]
    uqexa[nx+n_ghost:] = uqexa[n_ghost:2*n_ghost]

    for ilevel in [12, 11, 10, 9, 8, 7]:

        filename = './data/order01/burgers_uniform/burgers_level_'+str(ilevel)+'_'+str(ilevel)+'.h5'
        x, u, level = read_frame(filename, 'u')

        filename = './data/order01/burgers_eps_'+eps+'/burgers_level_'+str(min_level)+'_'+str(ilevel)+'.h5'
        xmr, umr, levelmr = read_frame(filename, 'u')
        umr_recons = recons(xmin, xmax, min_level, ilevel, xmr, umr, levelmr)

        filename = './data/order01/burgers_mlf_eps_'+eps+'/burgers_level_'+str(min_level)+'_'+str(ilevel)+'.h5'
        xmrmlf, umrmlf, levelmrmlf = read_frame(filename, 'u')
        umrmlf_recons = recons(xmin, xmax, min_level, ilevel, xmrmlf, umrmlf, levelmrmlf)

        nx = 2**ilevel
        dx = (xmax-xmin)/nx
        ldx.append(dx)

        uqexa_proj = np.empty(nx)
        for i in range(nx):
            uqexa_proj[i] = -(1/16)*uqexa[2*i-1+n_ghost] + (9/16)*uqexa[2*i+n_ghost] + (9/16)*uqexa[2*i+1+n_ghost] - (1/16)*uqexa[2*i+2+n_ghost]

        uqexa = np.empty(nx+2*n_ghost)
        uqexa[n_ghost:-n_ghost] = uqexa_proj
        # periodic boundary cond.
        uqexa[:n_ghost] = uqexa[nx:-n_ghost]
        uqexa[nx+n_ghost:] = uqexa[n_ghost:2*n_ghost]

        err = np.linalg.norm(u-uqexa_proj)*np.sqrt(dx)
        # print(f"dx = {dx:.3e}  error norm = {err}")
        lerr.append(err)

        errmr = np.linalg.norm(umr_recons-uqexa_proj)*np.sqrt(dx)
        # print(f"dx = {dx:.3e}  error norm = {errmr}")
        lerrmr.append(errmr)
        lerrmr_rate.append(np.round(1. - xmr.size/2**ilevel, 2))

        errmrmlf = np.linalg.norm(umrmlf_recons-uqexa_proj)*np.sqrt(dx)
        # print(f"dx = {dx:.3e}  error norm = {errmrmlf}")
        lerrmrmlf.append(errmrmlf)
        lerrmrmlf_rate.append(np.round(1. - xmrmlf.size/2**ilevel, 2))

        diff = np.linalg.norm(umr_recons - umrmlf_recons)*np.sqrt(dx)
        # print("difference = ", diff)
        ldiff.append(diff)

        errmrr = np.linalg.norm(umrmlf_recons - u)*np.sqrt(dx)
        # print("mr error = ", errmrr
        lerrmrr.append(errmrr)
        print()

    #print(lerrmr_rate)


    fig = go.Figure()

    fig.add_trace(go.Scatter(x=ldx, y=lerr, mode="markers", name=f"Uniform mesh"))
    fig.add_trace(go.Scatter(x=ldx, y=lerrmr, marker_symbol="square", text=lerrmr_rate, mode="markers+text",  textposition="top left", textfont=dict(color='rgb(221,132,82)', size=16), name=f"MRA"))
    fig.add_trace(go.Scatter(x=ldx, y=lerrmrmlf, marker_symbol="diamond", text=lerrmrmlf_rate, mode="markers+text",  textposition="bottom right", textfont=dict(color='rgb(85,168,104)', size=16),name="MRA+MLF"))
    #fig.add_trace(go.Scatter(x=ldx, y=ldiff, name="umr - umrmlf"))
    #fig.add_trace(go.Scatter(x=ldx, y=lerrmrr, name="u - umrmlf"))
    fig.add_trace(go.Scatter(x=ldx, y=1e0*np.array(ldx)**order, mode="lines", line_color='black', name=f"slope {order}"))
    fig.update_xaxes(type="log", exponentformat='e', ticktext=["Level 12", "Level 11", "Level 10", "Level 9", "Level 8", "Level 7"], tickvals=[2./2**12, 2./2**11, 2./2**10, 2./2**9, 2./2**8, 2./2**7], tickfont=dict(size=14))
    fig.update_yaxes(type="log", exponentformat='e', tickfont=dict(size=14))
    legend = dict(x=0.8, y=0.1, bgcolor='rgba(0,0,0,0)', font=dict(size=16))
    fig.update_layout(height=500, width=1000, title=f"Error for Burgers case, scheme order={order}, eps={eps}", legend=legend)
    fig.show()

compute_err(eps='1e-3')
```